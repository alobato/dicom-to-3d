{"version":3,"sources":["utils/apiTypes.ts","utils/CrxClient.ts","components/StatusIcon/StatusIcon.tsx","components/BuildTable/-Row/BuildTableRow.tsx","components/BuildTable/-Header/BuildTableHeader.tsx","components/BuildTable/BuildTable.tsx","env.ts","store/store.ts","components/BuildForm/BuildForm.tsx","components/Loader/Loader.tsx","pages/MainPage/MainPage.tsx","components/CINavbar/CINavbar.tsx","components/BuildDetails/-Header/BuildDetails-Header.tsx","components/BuildDetails/BuildDetails.tsx","pages/BuildPage/BuildPage.tsx","components/Theme/index.tsx","App.tsx","index.tsx"],"names":["Status","TYPE","ACTION","WSReadyState","cnStatusIcon","cn","StatusIcon","status","className","building","success","fail","cnBuildTableRow","BuildTableRow","id","commitHash","push","useHistory","onClick","BuildTableHeader","BuildTable","data","Table","striped","bordered","hover","map","buildId","key","SERVER_HOST","process","AGENT_HOST","SERVER_WS_PORT","Number","SERVER_HTTP_PORT","hostUrl","getAllBuildResults","_url","fetch","then","res","json","getBuildDetailedResult","sendBuild","command","BuildForm","sendData","useState","setCommitHash","setCommand","Card","Body","Form","Group","controlId","Label","Control","value","onChange","e","currentTarget","type","placeholder","as","rows","Button","preventDefault","variant","Loader","crxClient","host","ws","subject$","Observable","in$","Subject","out$","onReady","isReady","this","WebSocket","window","onopen","console","log","create","observer","onmessage","messageEvent","outMessage","JSON","parse","next","onerror","error","onclose","complete","share","subscribe","msg","send","toString","event","wsCloseHandler","alert","message","wasClean","code","reason","MainPage","props","state","getData","setState","EVENT","action","START_BUILD","startBuild","body","BUILD_RESULT","build","result","length","React","CINavbar","Navbar","collapseOnSelect","expand","bg","to","Toggle","aria-controls","Collapse","Nav","cnBuildDetailsHeader","BuildDetailsHeader","Header","cnBuildDetails","BuildDetails","stdOut","startDate","endDate","ListGroup","Item","moment","format","cnBuildPage","BuildPage","match","params","object","stringify","withRouter","cnTheme","App","setReady","useEffect","basename","Container","color","space","path","exact","component","config","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.480de291.chunk.js","sourcesContent":["export enum Status {\r\n  success ,\r\n  fail,\r\n  building,\r\n}\r\n\r\nexport type BuildId = string;\r\nexport type CommitHash = string;\r\nexport type Command = string;\r\nexport type Date = number;\r\n\r\nexport interface IWithRepositoryId {\r\n  repositoryId: string;\r\n}\r\n\r\nexport interface IWithCommitHash {\r\n  commitHash: CommitHash;\r\n}\r\n\r\nexport interface IWithCommand {\r\n  command: Command;\r\n}\r\n\r\nexport interface IWithBuildId {\r\n  buildId: BuildId;\r\n}\r\n\r\nexport interface IWithStatus {\r\n  status: Status;\r\n}\r\n\r\nexport interface IWithStdOut {\r\n  stdOut: string;\r\n}\r\n\r\nexport interface IWithStartDate {\r\n  startDate: Date;\r\n}\r\n\r\nexport interface IWithEndDate {\r\n  endDate: Date;\r\n}\r\n\r\nexport interface IWithHost {\r\n  host: string;\r\n}\r\n\r\nexport interface IWithPort {\r\n  port: number;\r\n}\r\n\r\nexport interface IWithRepositoryUrl {\r\n  repositoryUrl: string;\r\n}\r\n\r\nexport interface IBuildResponse extends\r\n  IWithBuildId,\r\n  IWithCommitHash,\r\n  IWithStatus,\r\n  IWithStdOut,\r\n  IWithStartDate,\r\n  IWithEndDate\r\n{}\r\n\r\nexport interface IBuildRequest extends\r\n  IWithBuildId,\r\n  IWithRepositoryId,\r\n  IWithCommitHash,\r\n  IWithCommand\r\n{}\r\n\r\nexport interface IClientBuildResult extends\r\n  IWithBuildId,\r\n  IWithStatus,\r\n  IWithCommitHash\r\n{}\r\n\r\nexport interface IClientBuildDetailedResult extends\r\n  IWithBuildId,\r\n  IWithStatus,\r\n  IWithCommitHash,\r\n  IWithCommand,\r\n  IWithStdOut,\r\n  IWithStartDate,\r\n  IWithEndDate\r\n{}\r\n\r\nexport enum TYPE {\r\n  SUBSCRIBE = 'SUBSCRIBE',\r\n  SUBSCRIPTION = 'SUBSCRIPTION',\r\n  UNSUBSCRIPTION = 'UNSUBSCRIPTION',\r\n  REQUEST = 'REQUEST',\r\n  RESPONSE = 'RESPONSE',\r\n  EVENT = 'EVENT'\r\n};\r\n\r\nexport enum ACTION {\r\n  START_BUILD = 'START_BUILD',\r\n  BUILD_RESULT = 'BUILD_RESULT',\r\n  BUILD_RESULTS = 'BUILD_RESULTS',\r\n}\r\n\r\nexport interface Message<T = any> {\r\n    type: TYPE;\r\n    action: ACTION;\r\n    body: T;\r\n}","import {Observable, Subject, Subscriber} from \"rxjs\";\r\nimport {Message} from \"./apiTypes\";\r\n\r\nimport \"rxjs/add/operator/timeout\";\r\nimport {SERVER_WS_PORT} from \"../env\";\r\n\r\nexport enum WSReadyState {\r\n  CONNECTING = 0, //\tSocket has been created. The connection is not yet open.\r\n  OPEN = 1, //\tThe connection is open and ready to communicate.\r\n  CLOSING = 2, //\tThe connection is in the process of closing.\r\n  CLOSED = 3, //\tThe connection is closed or couldn't be opened.\r\n}\r\n\r\nexport class CrxClient {\r\n  private host: string = `ws://localhost:${SERVER_WS_PORT}/`;\r\n  private ws: WebSocket;\r\n  public subject$: Observable<Message> = new Observable();\r\n  public in$ = new Subject<Message>();\r\n  public out$ = new Subject<Message>();\r\n\r\n  public onReady = () => {};\r\n  public isReady = false;\r\n\r\n  public constructor() {\r\n    this.ws = new WebSocket(this.host);\r\n    (window as any).ws = this.ws;\r\n\r\n    this.ws.onopen = () => {\r\n      console.log('Соединение установлено.');\r\n      this.subject$ = Observable.create(\r\n        (observer: Subscriber<MessageEvent>) => {\r\n          this.ws.onmessage = (messageEvent: MessageEvent) => {\r\n            let outMessage = JSON.parse(messageEvent.data);\r\n            observer.next(outMessage);\r\n            this.in$.next(outMessage);\r\n          };\r\n          this.ws.onerror = observer.error;\r\n          this.ws.onclose = observer.complete;\r\n        }\r\n      ).share();\r\n\r\n\r\n      this.out$.subscribe(\r\n        msg =>\r\n          this.ws.send(msg.toString())\r\n      );\r\n\r\n      this.isReady = true;\r\n      this.onReady();\r\n    };\r\n\r\n    this.ws.onclose = (event) => {\r\n      this.wsCloseHandler(event);\r\n    };\r\n\r\n    this.ws.onerror = (error: any) => {\r\n      alert(\"Ошибка \" + error.message);\r\n    };\r\n  }\r\n\r\n  private wsCloseHandler(event: CloseEvent) {\r\n    if (event.wasClean) {\r\n      console.log('Соединение закрыто чисто');\r\n    } else {\r\n      console.log('Обрыв соединения');\r\n    }\r\n    console.log('Код: ' + event.code + ' причина: ' + event.reason);\r\n  }\r\n}\r\n\r\nexport const crxClient = new CrxClient();","import React from 'react';\r\nimport {Status} from \"../../utils/apiTypes\";\r\nimport {MdCheck, MdClose, MdAutorenew} from \"react-icons/all\";\r\nimport {cn} from \"@bem-react/classname\";\r\nimport './StatusIcon.scss';\r\n\r\ninterface IStatusIconProps {\r\n  status: Status;\r\n}\r\n\r\nconst cnStatusIcon = cn('StatusIcon');\r\n\r\nconst StatusIcon = ({status}: IStatusIconProps) => (\r\n  <span className={cnStatusIcon()}>\r\n    {status === Status.building ? <MdAutorenew className={cnStatusIcon({'MdAutorenew': true}) }/> :\r\n      status === Status.success ? <MdCheck/> :\r\n        status === Status.fail ? <MdClose/> :\r\n          <div/>}\r\n  </span>\r\n);\r\n\r\nexport default StatusIcon;","import * as React from 'react';\r\nimport './BuildTableRow.scss';\r\nimport {cn} from '@bem-react/classname'\r\nimport {useHistory} from 'react-router';\r\nimport {BuildId, CommitHash, Status} from \"../../../utils/apiTypes\";\r\nimport StatusIcon from \"../../StatusIcon/StatusIcon\";\r\n\r\ninterface IBuildTableRowProps {\r\n  id: BuildId;\r\n  status: Status;\r\n  commitHash: CommitHash;\r\n}\r\n\r\nexport const cnBuildTableRow = cn('BuildTable-Row');\r\n\r\nconst BuildTableRow: React.FC<IBuildTableRowProps> = ({id, status, commitHash}) => {\r\n  const {push} = useHistory();\r\n  return (\r\n    <tr onClick={() => push(`build/${id}`)} className={cnBuildTableRow({\r\n      success: status === Status.success,\r\n      fail: status === Status.fail,\r\n      building: status === Status.building,\r\n    })}>\r\n      <td>\r\n        {id}\r\n      </td>\r\n      <td>\r\n        <StatusIcon status={status}/>\r\n      </td>\r\n      <td>{commitHash}</td>\r\n    </tr>\r\n  )\r\n};\r\n\r\nexport default BuildTableRow;","import * as React from 'react';\r\n\r\nconst BuildTableHeader = () => (\r\n  <thead>\r\n  <tr>\r\n    <th>id</th>\r\n    <th>OK</th>\r\n    <th>commit hash</th>\r\n  </tr>\r\n  </thead>\r\n);\r\n\r\nexport default BuildTableHeader;","import * as React from 'react';\r\nimport {Table} from \"react-bootstrap\";\r\nimport BuildTableRow from \"./-Row/BuildTableRow\";\r\nimport BuildTableHeader from \"./-Header/BuildTableHeader\";\r\nimport {IClientBuildResult, Status} from \"../../utils/apiTypes\";\r\n\r\ninterface IBuildTableProps {\r\n  data: IClientBuildResult[];\r\n}\r\n\r\nconst BuildTable: React.FC<IBuildTableProps> = ({data}) => {\r\n  return (\r\n    <Table className=\"BuildList\" striped bordered hover>\r\n      <BuildTableHeader/>\r\n      <tbody>\r\n      {\r\n        data.map(\r\n          ({buildId, status, commitHash})  =>\r\n            <BuildTableRow key={buildId} id={buildId} status={status} commitHash={commitHash}/>\r\n        )\r\n      }\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default BuildTable;","export const SERVER_HOST = process.env.AGENT_HOST || 'http://localhost';\r\nexport const SERVER_WS_PORT = Number(process.env.SERVER_WS_PORT) || 8021;\r\nexport const SERVER_HTTP_PORT = Number(process.env.SERVER_HTTP_PORT) || 3021;","import {IClientBuildResult, IClientBuildDetailedResult, BuildId, CommitHash} from \"../utils/apiTypes\";\r\nimport {SERVER_HOST, SERVER_HTTP_PORT} from \"../env\";\r\n\r\nconst hostUrl = `${SERVER_HOST}:${SERVER_HTTP_PORT}`;\r\n\r\nexport const getAllBuildResults = (): Promise<IClientBuildResult[]> => {\r\n  const url = 'get_build_results';\r\n  const _url = `${hostUrl}/${url}`;\r\n  return fetch(`${_url}`).then((res) => res.json());\r\n};\r\n\r\nexport const getBuildDetailedResult = (buildId: BuildId): Promise<IClientBuildDetailedResult> => {\r\n  const url = 'get_build_detailed_result';\r\n  const _url = `${hostUrl}/${url}/${buildId}`;\r\n  return fetch(`${_url}`).then((res) => res.json());\r\n};\r\n\r\nexport const sendBuild = (commitHash: CommitHash, command: string): Promise<string> => {\r\n  const url = 'build';\r\n  const _url = `${hostUrl}/${url}/${commitHash}/${command}`;\r\n  return fetch(`${_url}`).then((res) => res.json());\r\n};","import * as React from 'react';\r\nimport {Button, Card, Form} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\nimport {CommitHash} from \"../../utils/apiTypes\";\r\nimport {sendBuild} from \"../../store/store\";\r\n\r\ninterface IBuildFormProps {\r\n  sendData?: (commitHash: CommitHash, command: string) => Promise<string>;\r\n}\r\n\r\nconst BuildForm: React.FC<IBuildFormProps> = (\r\n  {\r\n    sendData = sendBuild\r\n  }\r\n) => {\r\n  const [commitHash, setCommitHash] = useState<CommitHash>('');\r\n  const onChangeCommitHash = (e: React.FormEvent<HTMLInputElement>) => setCommitHash(e.currentTarget.value);\r\n\r\n  const [command, setCommand] = useState<string>('');\r\n  const onChangeCommand = (e: React.FormEvent<HTMLInputElement>) => setCommand(e.currentTarget.value);\r\n\r\n  const clearData = () => {\r\n    setCommitHash('');\r\n    setCommand('');\r\n  };\r\n\r\n  const onClickSubmit = (e: React.FormEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    sendData(commitHash, command);\r\n    clearData();\r\n  };\r\n\r\n  return (\r\n    <Card className=\"BuildForm\">\r\n      <Card.Body>This is some text within a card body.\r\n        <Form>\r\n          <Form.Group controlId=\"formBasicEmail\">\r\n            <Form.Label>commit hash</Form.Label>\r\n            <Form.Control\r\n              value={commitHash}\r\n              onChange={onChangeCommitHash}\r\n              type=\"text\"\r\n              placeholder=\"hash commit\"\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n            <Form.Label>command</Form.Label>\r\n            <Form.Control\r\n              value={command}\r\n              onChange={onChangeCommand}\r\n              as=\"textarea\"\r\n              rows=\"3\"\r\n            />\r\n          </Form.Group>\r\n\r\n          <Button\r\n            onClick={onClickSubmit}\r\n            variant=\"primary\"\r\n            type=\"submit\"\r\n          >\r\n            Run build\r\n          </Button>\r\n        </Form>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default BuildForm;","import React from 'react';\r\n\r\nconst Loader = () => <div>Loading...</div>;\r\n\r\nexport default Loader;\r\n","import * as React from 'react';\r\nimport BuildTable from \"../../components/BuildTable/BuildTable\";\r\nimport BuildForm from \"../../components/BuildForm/BuildForm\";\r\nimport './MainPage.scss';\r\nimport {IClientBuildResult, ACTION, TYPE, Message} from \"../../utils/apiTypes\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport {crxClient} from \"../../utils/CrxClient\";\r\n\r\ninterface IMainPageProps {\r\n  getData: () => Promise<IClientBuildResult[]>;\r\n}\r\n\r\ninterface IMainPageState {\r\n  data: IClientBuildResult[];\r\n}\r\n\r\nclass MainPage extends React.Component<IMainPageProps, IMainPageState> {\r\n  constructor(props: IMainPageProps) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n    }\r\n  }\r\n\r\n  componentWillMount(): void {\r\n    const {props:{getData}} = this;\r\n\r\n    getData().then(\r\n      (data) => this.setState({data})\r\n    );\r\n\r\n    crxClient.subject$\r\n      .subscribe(\r\n        (message: Message<IClientBuildResult>) => {\r\n          console.log('message from Subscribe: ', message);\r\n          if (message.type === TYPE.EVENT) {\r\n            if (message.action === ACTION.START_BUILD) {\r\n              console.log('get', message);\r\n              const startBuild: IClientBuildResult = message.body;\r\n              this.setState({\r\n                data: [\r\n                  startBuild,\r\n                  ...this.state.data\r\n                ]\r\n              })\r\n            } else if (message.action === ACTION.BUILD_RESULT) {\r\n              console.log('get', message);\r\n              const build: IClientBuildResult = message.body;\r\n              this.setState({\r\n                data: this.state.data.map(\r\n                  result => result.buildId === build.buildId\r\n                    ? build\r\n                    : result\r\n                )\r\n              })\r\n            }\r\n          }\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    const {state: {data}} = this;\r\n    return (\r\n      <div className=\"MainPage\">\r\n        <BuildForm/>\r\n        {\r\n          data.length !== 0\r\n            ? <BuildTable data={data}/>\r\n            : <Loader/>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\r\nimport {Nav, Navbar} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst CINavbar = () => {\r\n  return (\r\n    <Navbar collapseOnSelect={true} expand=\"lg\" bg=\"light\" variant=\"light\">\r\n      <Link className=\"navbar-brand\" to=\"/\">Fosemberg CI</Link>\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n      <Navbar.Collapse>\r\n        <Nav className=\"mr-auto\">\r\n          <Link className=\"nav-link\" to=\"/\">Main</Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default CINavbar;","import * as React from 'react';\r\nimport './BuildDetails-Header.scss';\r\nimport StatusIcon from \"../../StatusIcon/StatusIcon\";\r\nimport {Card} from \"react-bootstrap\";\r\nimport {BuildId, Status} from \"../../../utils/apiTypes\";\r\nimport {cn} from \"@bem-react/classname\";\r\n\r\ninterface IBuildDetailsHeaderProps {\r\n  status: Status;\r\n  buildId: BuildId;\r\n  commitHash: string;\r\n}\r\n\r\nconst cnBuildDetailsHeader = cn('BuildDetails-Header');\r\n\r\nconst BuildDetailsHeader = ({status, buildId, commitHash}: IBuildDetailsHeaderProps) => {\r\n  return (\r\n    <Card.Header className={cnBuildDetailsHeader({\r\n      building: status === Status.building,\r\n      success: status === Status.success,\r\n      fail: status === Status.fail,\r\n    })}>\r\n      <StatusIcon status={status}/>\r\n      {'  '}\r\n      {buildId}\r\n      {' - '}\r\n      {commitHash}\r\n    </Card.Header>\r\n  );\r\n};\r\n\r\nexport default BuildDetailsHeader;","import * as React from 'react';\r\nimport {Card, ListGroup} from \"react-bootstrap\";\r\nimport {IClientBuildDetailedResult, Status} from \"../../utils/apiTypes\";\r\nimport {cn} from \"@bem-react/classname\";\r\nimport BuildDetailsHeader from \"./-Header/BuildDetails-Header\";\r\nimport moment from 'moment';\r\n\r\nconst dateFormat = 'DD MMM YYYY hh:mm a';\r\nexport const cnBuildDetails = cn('BuildDetails');\r\n\r\nconst BuildDetails: React.FC<IClientBuildDetailedResult> = (\r\n  {\r\n    buildId,\r\n    commitHash,\r\n    command,\r\n    status,\r\n    stdOut,\r\n    startDate,\r\n    endDate\r\n  }\r\n) => {\r\n  return (\r\n    <Card className={cnBuildDetails()}>\r\n      <BuildDetailsHeader status={status} buildId={buildId} commitHash={commitHash}/>\r\n      <ListGroup variant=\"flush\">\r\n        <ListGroup.Item>command: {command}</ListGroup.Item>\r\n        <ListGroup.Item>start build: {moment(startDate).format(dateFormat)}</ListGroup.Item>\r\n        {status !== Status.building && <ListGroup.Item>end build: {moment(endDate).format(dateFormat)}</ListGroup.Item>}\r\n        {status !== Status.building && <ListGroup.Item>std out: {stdOut}</ListGroup.Item>}\r\n      </ListGroup>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default BuildDetails;","import * as React from 'react';\r\nimport BuildDetails from \"../../components/BuildDetails/BuildDetails\";\r\nimport {\r\n  BuildId,\r\n  IClientBuildDetailedResult,\r\n  IClientBuildResult,\r\n  Status,\r\n  ACTION,\r\n  TYPE,\r\n  Message\r\n} from \"../../utils/apiTypes\";\r\nimport {cn} from \"@bem-react/classname\";\r\nimport './BuildPage.scss';\r\n\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport {withRouter, RouteComponentProps} from \"react-router\";\r\nimport {crxClient} from \"../../utils/CrxClient\";\r\n\r\ninterface IBuildPageProps {\r\n  getData: (buildId: BuildId) => Promise<IClientBuildDetailedResult>;\r\n}\r\n\r\ninterface IBuildPageState {\r\n  data: IClientBuildDetailedResult | {};\r\n}\r\n\r\ninterface IMatchParams {\r\n  id: string\r\n}\r\n\r\nconst cnBuildPage = cn('BuildPage');\r\n\r\nconst isEmptyObject = (object: Object) => JSON.stringify(object) === '{}';\r\n\r\nclass BuildPage extends React.Component<IBuildPageProps & RouteComponentProps<IMatchParams>, IBuildPageState> {\r\n  constructor(props: IBuildPageProps & RouteComponentProps<IMatchParams>) {\r\n    super(props);\r\n    this.state = {\r\n      data: {},\r\n    }\r\n  }\r\n\r\n  componentWillMount(): void {\r\n    const {\r\n      props: {\r\n        getData,\r\n        match: {\r\n          params: {id}\r\n        }\r\n      }\r\n    } = this;\r\n\r\n    getData(id).then((data) => this.setState({data}));\r\n\r\n    crxClient.subject$\r\n      .subscribe(\r\n        (message: Message<IClientBuildDetailedResult>) => {\r\n          console.log('message from Subscribe: ', message);\r\n          if (message.type === TYPE.EVENT) {\r\n            if (message.action === ACTION.BUILD_RESULT) {\r\n              console.log('get', message);\r\n              const data: IClientBuildDetailedResult = message.body;\r\n              this.setState({data})\r\n            }\r\n          }\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    const {state: {data}} = this;\r\n    return (\r\n      <div className={cnBuildPage()}>\r\n        {\r\n          isEmptyObject(data)\r\n            ? <Loader/>\r\n            : <BuildDetails\r\n              {...(data as IClientBuildDetailedResult)}\r\n            />\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default withRouter(BuildPage);","import {cn} from \"@bem-react/classname\";\r\nimport {IClassNameProps} from \"@bem-react/core\";\r\n\r\nexport interface ITheme extends IClassNameProps {\r\n  color?: 'project-default';\r\n  space?: 'default';\r\n}\r\n\r\nexport const cnTheme = cn('Theme');\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\r\nimport Container from 'react-bootstrap/Container'\r\nimport MainPage from \"./pages/MainPage/MainPage\";\r\nimport CINavbar from \"./components/CINavbar/CINavbar\";\r\nimport BuildPage from \"./pages/BuildPage/BuildPage\";\r\nimport {cnTheme} from \"./components/Theme\";\r\nimport \"./components/Theme/_color/Theme_color_project-default.scss\";\r\nimport \"./components/Theme/_space/Theme_space_default.scss\";\r\nimport {crxClient, CrxClient, WSReadyState} from \"./utils/CrxClient\";\r\nimport Loader from \"./components/Loader/Loader\";\r\nimport {getAllBuildResults, getBuildDetailedResult} from \"./store/store\";\r\n\r\n\r\nconst App: React.FC = () => {\r\n  const [isReady, setReady] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    crxClient.isReady\r\n      ? setReady(true)\r\n      : crxClient.onReady = () => setReady(true)\r\n  }, []);\r\n\r\n  return (\r\n    isReady\r\n      ? <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Container className={cnTheme({color: 'project-default', space: 'default'}, [\"p-3\"])}>\r\n          <CINavbar/>\r\n          <Switch>\r\n            <Route path='/' exact={true} component={() => <MainPage getData={getAllBuildResults}/>}/>\r\n            <Route path=\"/build/:id\" component={() => <BuildPage getData={getBuildDetailedResult}/>}/>\r\n          </Switch>\r\n        </Container>\r\n      </BrowserRouter>\r\n      : <Loader/>\r\n  )\r\n};\r\n\r\nexport default App;","import { config } from \"dotenv\"\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconfig();\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}