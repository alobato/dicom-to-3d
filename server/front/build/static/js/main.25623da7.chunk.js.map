{"version":3,"sources":["utils/apiTypes.ts","components/StatusIcon/StatusIcon.tsx","components/BuildTable/-Row/BuildTableRow.tsx","components/BuildTable/-Header/BuildTableHeader.tsx","components/BuildTable/BuildTable.tsx","config/env.ts","store/store.ts","components/BuildForm/BuildForm.tsx","components/Loader/Loader.tsx","utils/CrxClient.ts","pages/MainPage/MainPage.tsx","components/CINavbar/CINavbar.tsx","components/BuildDetails/-Header/BuildDetails-Header.tsx","components/BuildDetails/BuildDetails.tsx","pages/BuildPage/BuildPage.tsx","components/Theme/index.tsx","App.tsx","index.tsx"],"names":["Status","TYPE","ACTION","cnStatusIcon","cn","StatusIcon","status","className","building","success","fail","cnBuildTableRow","BuildTableRow","buildId","repositoryOwner","repositoryName","commitHash","push","useHistory","onClick","BuildTableHeader","BuildTable","data","Table","striped","bordered","hover","map","buildTableRowProps","key","SERVER_HOST","process","AGENT_HOST","SERVER_WS_PORT","Number","SERVER_HTTP_PORT","hostUrl","getAllBuildResults","_url","fetch","then","res","json","getBuildDetailedResult","sendBuild","repositoryUrl","command","encodeURIComponent","BuildForm","sendData","useState","setRepositoryUrl","setCommitHash","setCommand","Card","Body","Form","Group","controlId","Label","Control","value","onChange","e","currentTarget","type","placeholder","as","rows","Button","preventDefault","variant","Loader","crxClient","host","ws","subject$","Observable","in$","Subject","out$","onReady","isReady","this","WebSocket","window","onopen","console","log","create","observer","onmessage","messageEvent","outMessage","JSON","parse","next","onerror","error","onclose","complete","share","subscribe","msg","send","toString","event","wsCloseHandler","alert","message","wasClean","code","reason","MainPage","props","state","getData","setState","EVENT","action","START_BUILD","startBuild","body","BUILD_RESULT","build","result","length","React","CINavbar","Navbar","collapseOnSelect","expand","bg","to","Toggle","aria-controls","Collapse","Nav","cnBuildDetailsHeader","BuildDetailsHeader","Header","cnBuildDetails","BuildDetails","stdOut","startDate","endDate","ListGroup","Item","moment","format","cnBuildPage","BuildPage","match","params","id","object","stringify","withRouter","cnTheme","App","setReady","useEffect","basename","Container","color","space","path","exact","component","config","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.25623da7.chunk.js","sourcesContent":["export enum Status {\n  success ,\n  fail,\n  building,\n}\n\nexport type RepositoryUrl = string;\nexport type BuildId = string;\nexport type CommitHash = string;\nexport type Command = string;\nexport type Date = number;\n\nexport interface IWithRepositoryId {\n  repositoryId: string;\n}\n\nexport interface IWithCommitHash {\n  commitHash: CommitHash;\n}\n\nexport interface IWithCommand {\n  command: Command;\n}\n\nexport interface IWithBuildId {\n  buildId: BuildId;\n}\n\nexport interface IWithStatus {\n  status: Status;\n}\n\nexport interface IWithStdOut {\n  stdOut: string;\n}\n\nexport interface IWithStartDate {\n  startDate: Date;\n}\n\nexport interface IWithEndDate {\n  endDate: Date;\n}\n\nexport interface IWithHost {\n  host: string;\n}\n\nexport interface IWithPort {\n  port: number;\n}\n\nexport interface IWithRepositoryUrl {\n  repositoryUrl: string;\n}\n\nexport interface IWithRepositoryOwner {\n  repositoryOwner: string;\n}\n\nexport interface IWithRepositoryName {\n  repositoryName: string;\n}\n\nexport interface IRepositoryInfo extends\n  IWithRepositoryOwner,\n  IWithRepositoryName\n{}\n\nexport interface IBuildResponse extends\n  IWithBuildId,\n  IWithRepositoryUrl,\n  IWithCommitHash,\n  IWithStatus,\n  IWithStdOut,\n  IWithStartDate,\n  IWithEndDate\n{}\n\nexport interface IBuildRequest extends\n  IWithBuildId,\n  IWithRepositoryUrl,\n  IWithCommitHash,\n  IWithCommand\n{}\n\nexport interface IClientBuildResult extends\n  IWithBuildId,\n  IWithStatus,\n  IRepositoryInfo,\n  IWithCommitHash\n{}\n\nexport interface IClientBuildDetailedResult extends\n  IWithBuildId,\n  IWithStatus,\n  IWithRepositoryUrl,\n  IWithCommitHash,\n  IWithCommand,\n  IWithStdOut,\n  IWithStartDate,\n  IWithEndDate\n{}\n\nexport enum TYPE {\n  SUBSCRIBE = 'SUBSCRIBE',\n  SUBSCRIPTION = 'SUBSCRIPTION',\n  UNSUBSCRIPTION = 'UNSUBSCRIPTION',\n  REQUEST = 'REQUEST',\n  RESPONSE = 'RESPONSE',\n  EVENT = 'EVENT'\n};\n\nexport enum ACTION {\n  START_BUILD = 'START_BUILD',\n  BUILD_RESULT = 'BUILD_RESULT',\n  BUILD_RESULTS = 'BUILD_RESULTS',\n}\n\nexport interface Message<T = any> {\n    type: TYPE;\n    action: ACTION;\n    body: T;\n}","import React from 'react';\nimport {Status} from \"../../utils/apiTypes\";\nimport {MdCheck, MdClose, MdAutorenew} from \"react-icons/all\";\nimport {cn} from \"@bem-react/classname\";\nimport './StatusIcon.scss';\n\ninterface IStatusIconProps {\n  status: Status;\n}\n\nconst cnStatusIcon = cn('StatusIcon');\n\nconst StatusIcon = ({status}: IStatusIconProps) => (\n  <span className={cnStatusIcon()}>\n    {status === Status.building ? <MdAutorenew className={cnStatusIcon({'MdAutorenew': true}) }/> :\n      status === Status.success ? <MdCheck/> :\n        status === Status.fail ? <MdClose/> :\n          <div/>}\n  </span>\n);\n\nexport default StatusIcon;","import * as React from 'react';\nimport './BuildTableRow.scss';\nimport {cn} from '@bem-react/classname'\nimport {useHistory} from 'react-router';\nimport {IClientBuildResult, Status} from \"../../../utils/apiTypes\";\nimport StatusIcon from \"../../StatusIcon/StatusIcon\";\n\ntype IBuildTableRowProps = IClientBuildResult;\n\nexport const cnBuildTableRow = cn('BuildTable-Row');\n\nconst BuildTableRow: React.FC<IBuildTableRowProps> = (\n  {\n    buildId,\n    status,\n    repositoryOwner,\n    repositoryName,\n    commitHash,\n  }\n) => {\n  const {push} = useHistory();\n  return (\n    <tr\n      onClick={() => push(`build/${buildId}`)}\n      className={cnBuildTableRow({\n        success: status === Status.success,\n        fail: status === Status.fail,\n        building: status === Status.building,\n      })}\n    >\n      <td>{buildId}</td>\n      <td><StatusIcon status={status}/></td>\n      <td>{repositoryOwner}</td>\n      <td>{repositoryName}</td>\n      <td>{commitHash}</td>\n    </tr>\n  )\n};\n\nexport default BuildTableRow;","import * as React from 'react';\n\nconst BuildTableHeader = () => (\n  <thead>\n  <tr>\n    <th>id</th>\n    <th>OK</th>\n    <th>owner</th>\n    <th>name</th>\n    <th>hash</th>\n  </tr>\n  </thead>\n);\n\nexport default BuildTableHeader;","import * as React from 'react';\nimport {Table} from \"react-bootstrap\";\nimport BuildTableRow from \"./-Row/BuildTableRow\";\nimport BuildTableHeader from \"./-Header/BuildTableHeader\";\nimport {IClientBuildResult} from \"../../utils/apiTypes\";\n\ninterface IBuildTableProps {\n  data: IClientBuildResult[];\n}\n\nconst BuildTable: React.FC<IBuildTableProps> = ({data}) => {\n  return (\n    <Table className=\"BuildList\" striped bordered hover>\n      <BuildTableHeader/>\n      <tbody>\n      {\n        data.map(\n          (buildTableRowProps)  =>\n            <BuildTableRow\n              key={buildTableRowProps.buildId}\n              {...buildTableRowProps}\n            />\n        )\n      }\n      </tbody>\n    </Table>\n  );\n};\n\nexport default BuildTable;","export const SERVER_HOST = process.env.AGENT_HOST || 'http://localhost';\nexport const SERVER_WS_PORT = Number(process.env.SERVER_WS_PORT) || 8021;\nexport const SERVER_HTTP_PORT = Number(process.env.SERVER_HTTP_PORT) || 3021;","import {IClientBuildResult, IClientBuildDetailedResult, RepositoryUrl, BuildId, CommitHash} from \"../utils/apiTypes\";\nimport {SERVER_HOST, SERVER_HTTP_PORT} from \"../config/env\";\n\nconst hostUrl = `${SERVER_HOST}:${SERVER_HTTP_PORT}`;\n\nexport const getAllBuildResults = (): Promise<IClientBuildResult[]> => {\n  const url = 'get_build_results';\n  const _url = `${hostUrl}/${url}`;\n  return fetch(`${_url}`).then((res) => res.json());\n};\n\nexport const getBuildDetailedResult = (buildId: BuildId): Promise<IClientBuildDetailedResult> => {\n  const url = 'get_build_detailed_result';\n  const _url = `${hostUrl}/${url}/${buildId}`;\n  return fetch(`${_url}`).then((res) => res.json());\n};\n\nexport const sendBuild = (repositoryUrl: RepositoryUrl, commitHash: CommitHash, command: string): Promise<string> => {\n  const url = 'build';\n  const _url = `${hostUrl}/${url}/${encodeURIComponent(repositoryUrl)}/${commitHash}/${command}`;\n  return fetch(`${_url}`).then((res) => res.json());\n};","import * as React from 'react';\nimport {Button, Card, Form} from \"react-bootstrap\";\nimport {useState} from \"react\";\nimport {CommitHash, RepositoryUrl} from \"../../utils/apiTypes\";\nimport {sendBuild} from \"../../store/store\";\n\ninterface IBuildFormProps {\n  sendData?: (repositoryUrl: RepositoryUrl, commitHash: CommitHash, command: string) => Promise<string>;\n}\n\nconst BuildForm: React.FC<IBuildFormProps> = (\n  {\n    sendData = sendBuild\n  }\n) => {\n  const [repositoryUrl, setRepositoryUrl] = useState<RepositoryUrl>('');\n  const onChangeRepositoryUrl = (e: React.FormEvent<HTMLInputElement>) => setRepositoryUrl(e.currentTarget.value);\n\n  const [commitHash, setCommitHash] = useState<CommitHash>('');\n  const onChangeCommitHash = (e: React.FormEvent<HTMLInputElement>) => setCommitHash(e.currentTarget.value);\n\n  const [command, setCommand] = useState<string>('');\n  const onChangeCommand = (e: React.FormEvent<HTMLInputElement>) => setCommand(e.currentTarget.value);\n\n  const clearData = () => {\n    setRepositoryUrl('');\n    setCommitHash('');\n    setCommand('');\n  };\n\n  const onClickSubmit = (e: React.FormEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    sendData(repositoryUrl, commitHash, command);\n    clearData();\n  };\n\n  return (\n    <Card className=\"BuildForm\">\n      <Card.Body>\n        <Form>\n          <Form.Group controlId=\"formBasicEmail\">\n            <Form.Label>repository url</Form.Label>\n            <Form.Control\n              value={repositoryUrl}\n              onChange={onChangeRepositoryUrl}\n              type=\"text\"\n              placeholder=\"https://github.com/fosemberg/fosemberg-ci.git\"\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"formBasicEmail\">\n            <Form.Label>branch or commit hash</Form.Label>\n            <Form.Control\n              value={commitHash}\n              onChange={onChangeCommitHash}\n              type=\"text\"\n              placeholder=\"master\"\n            />\n          </Form.Group>\n\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n            <Form.Label>command</Form.Label>\n            <Form.Control\n              value={command}\n              onChange={onChangeCommand}\n              as=\"textarea\"\n              rows=\"3\"\n              placeholder=\"npm run build\"\n            />\n          </Form.Group>\n\n          <Button\n            onClick={onClickSubmit}\n            variant=\"primary\"\n            type=\"submit\"\n          >\n            Run build\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default BuildForm;","import React from 'react';\n\nconst Loader = () => <div>Loading...</div>;\n\nexport default Loader;\n","import {Observable, Subject, Subscriber} from \"rxjs\";\nimport {Message} from \"./apiTypes\";\n\nimport \"rxjs/add/operator/timeout\";\nimport {SERVER_WS_PORT} from \"../config/env\";\n\nexport class CrxClient {\n  private host: string = `ws://localhost:${SERVER_WS_PORT}/`;\n  private ws: WebSocket;\n  public subject$: Observable<Message> = new Observable();\n  public in$ = new Subject<Message>();\n  public out$ = new Subject<Message>();\n\n  public onReady = () => {};\n  public isReady = false;\n\n  public constructor() {\n    this.ws = new WebSocket(this.host);\n    (window as any).ws = this.ws;\n\n    this.ws.onopen = () => {\n      console.log('Соединение установлено.');\n      this.subject$ = Observable.create(\n        (observer: Subscriber<MessageEvent>) => {\n          this.ws.onmessage = (messageEvent: MessageEvent) => {\n            let outMessage = JSON.parse(messageEvent.data);\n            observer.next(outMessage);\n            this.in$.next(outMessage);\n          };\n          this.ws.onerror = observer.error;\n          this.ws.onclose = observer.complete;\n        }\n      ).share();\n\n\n      this.out$.subscribe(\n        msg =>\n          this.ws.send(msg.toString())\n      );\n\n      this.isReady = true;\n      this.onReady();\n    };\n\n    this.ws.onclose = (event) => {\n      this.wsCloseHandler(event);\n    };\n\n    this.ws.onerror = (error: any) => {\n      alert(\"Ошибка \" + error.message);\n    };\n  }\n\n  private wsCloseHandler(event: CloseEvent) {\n    if (event.wasClean) {\n      console.log('Соединение закрыто чисто');\n    } else {\n      console.log('Обрыв соединения');\n    }\n    console.log('Код: ' + event.code + ' причина: ' + event.reason);\n  }\n}\n\nexport const crxClient = new CrxClient();","import * as React from 'react';\nimport BuildTable from \"../../components/BuildTable/BuildTable\";\nimport BuildForm from \"../../components/BuildForm/BuildForm\";\nimport './MainPage.scss';\nimport {IClientBuildResult, ACTION, TYPE, Message} from \"../../utils/apiTypes\";\nimport Loader from \"../../components/Loader/Loader\";\nimport {crxClient} from \"../../utils/CrxClient\";\n\ninterface IMainPageProps {\n  getData: () => Promise<IClientBuildResult[]>;\n}\n\ninterface IMainPageState {\n  data: IClientBuildResult[];\n}\n\nclass MainPage extends React.Component<IMainPageProps, IMainPageState> {\n  constructor(props: IMainPageProps) {\n    super(props);\n    this.state = {\n      data: [],\n    }\n  }\n\n  componentWillMount(): void {\n    const {props:{getData}} = this;\n\n    getData().then(\n      (data) => this.setState({data})\n    );\n\n    crxClient.subject$\n      .subscribe(\n        (message: Message<IClientBuildResult>) => {\n          console.log('message from Subscribe: ', message);\n          if (message.type === TYPE.EVENT) {\n            if (message.action === ACTION.START_BUILD) {\n              console.log('get', message);\n              const startBuild: IClientBuildResult = message.body;\n              this.setState({\n                data: [\n                  startBuild,\n                  ...this.state.data\n                ]\n              })\n            } else if (message.action === ACTION.BUILD_RESULT) {\n              console.log('get', message);\n              const build: IClientBuildResult = message.body;\n              this.setState({\n                data: this.state.data.map(\n                  result => result.buildId === build.buildId\n                    ? build\n                    : result\n                )\n              })\n            }\n          }\n        }\n      )\n  }\n\n  render() {\n    const {state: {data}} = this;\n    return (\n      <div className=\"MainPage\">\n        <BuildForm/>\n        {\n          data.length !== 0\n            ? <BuildTable data={data}/>\n            : <Loader/>\n        }\n      </div>\n    )\n  }\n}\n\nexport default MainPage;","import React from 'react';\nimport {Nav, Navbar} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\n\nconst CINavbar = () => {\n  return (\n    <Navbar collapseOnSelect={true} expand=\"lg\" bg=\"light\" variant=\"light\">\n      <Link className=\"navbar-brand\" to=\"/\">Fosemberg CI</Link>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n      <Navbar.Collapse>\n        <Nav className=\"mr-auto\">\n          <Link className=\"nav-link\" to=\"/\">Main</Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default CINavbar;","import * as React from 'react';\nimport './BuildDetails-Header.scss';\nimport StatusIcon from \"../../StatusIcon/StatusIcon\";\nimport {Card} from \"react-bootstrap\";\nimport {BuildId, Status} from \"../../../utils/apiTypes\";\nimport {cn} from \"@bem-react/classname\";\n\ninterface IBuildDetailsHeaderProps {\n  status: Status;\n  buildId: BuildId;\n  commitHash: string;\n}\n\nconst cnBuildDetailsHeader = cn('BuildDetails-Header');\n\nconst BuildDetailsHeader = ({status, buildId, commitHash}: IBuildDetailsHeaderProps) => {\n  return (\n    <Card.Header className={cnBuildDetailsHeader({\n      building: status === Status.building,\n      success: status === Status.success,\n      fail: status === Status.fail,\n    })}>\n      <StatusIcon status={status}/>\n      {'  '}\n      {buildId}\n      {' - '}\n      {commitHash}\n    </Card.Header>\n  );\n};\n\nexport default BuildDetailsHeader;","import * as React from 'react';\nimport {Card, ListGroup} from \"react-bootstrap\";\nimport {IClientBuildDetailedResult, Status} from \"../../utils/apiTypes\";\nimport {cn} from \"@bem-react/classname\";\nimport BuildDetailsHeader from \"./-Header/BuildDetails-Header\";\nimport moment from 'moment';\n\nconst dateFormat = 'DD MMM YYYY hh:mm a';\nexport const cnBuildDetails = cn('BuildDetails');\n\nconst BuildDetails: React.FC<IClientBuildDetailedResult> = (\n  {\n    buildId,\n    repositoryUrl,\n    commitHash,\n    command,\n    status,\n    stdOut,\n    startDate,\n    endDate\n  }\n) => {\n  return (\n    <Card className={cnBuildDetails()}>\n      <BuildDetailsHeader status={status} buildId={buildId} commitHash={commitHash}/>\n      <ListGroup variant=\"flush\">\n        <ListGroup.Item>url: {repositoryUrl}</ListGroup.Item>\n        <ListGroup.Item>command: {command}</ListGroup.Item>\n        <ListGroup.Item>start build: {moment(startDate).format(dateFormat)}</ListGroup.Item>\n        {status !== Status.building && <ListGroup.Item>end build: {moment(endDate).format(dateFormat)}</ListGroup.Item>}\n        {\n          status !== Status.building && <ListGroup.Item>\n            std out: <br/>\n            <pre>{stdOut}</pre>\n          </ListGroup.Item>\n        }\n      </ListGroup>\n    </Card>\n  );\n};\n\nexport default BuildDetails;","import * as React from 'react';\nimport BuildDetails from \"../../components/BuildDetails/BuildDetails\";\nimport {\n  BuildId,\n  IClientBuildDetailedResult,\n  ACTION,\n  TYPE,\n  Message\n} from \"../../utils/apiTypes\";\nimport {cn} from \"@bem-react/classname\";\nimport './BuildPage.scss';\n\nimport Loader from \"../../components/Loader/Loader\";\nimport {withRouter, RouteComponentProps} from \"react-router\";\nimport {crxClient} from \"../../utils/CrxClient\";\n\ninterface IBuildPageProps {\n  getData: (buildId: BuildId) => Promise<IClientBuildDetailedResult>;\n}\n\ninterface IBuildPageState {\n  data: IClientBuildDetailedResult | {};\n}\n\ninterface IMatchParams {\n  id: string\n}\n\nconst cnBuildPage = cn('BuildPage');\n\nconst isEmptyObject = (object: Object) => JSON.stringify(object) === '{}';\n\nclass BuildPage extends React.Component<IBuildPageProps & RouteComponentProps<IMatchParams>, IBuildPageState> {\n  constructor(props: IBuildPageProps & RouteComponentProps<IMatchParams>) {\n    super(props);\n    this.state = {\n      data: {},\n    }\n  }\n\n  componentWillMount(): void {\n    const {\n      props: {\n        getData,\n        match: {\n          params: {id}\n        }\n      }\n    } = this;\n\n    getData(id).then((data) => this.setState({data}));\n\n    crxClient.subject$\n      .subscribe(\n        (message: Message<IClientBuildDetailedResult>) => {\n          console.log('message from Subscribe: ', message);\n          if (message.type === TYPE.EVENT) {\n            if (message.action === ACTION.BUILD_RESULT) {\n              console.log('get', message);\n              const data: IClientBuildDetailedResult = message.body;\n              this.setState({data})\n            }\n          }\n        }\n      )\n  }\n\n  render() {\n    const {state: {data}} = this;\n    return (\n      <div className={cnBuildPage()}>\n        {\n          isEmptyObject(data)\n            ? <Loader/>\n            : <BuildDetails\n              {...(data as IClientBuildDetailedResult)}\n            />\n        }\n      </div>\n    )\n  }\n}\n\nexport default withRouter(BuildPage);","import {cn} from \"@bem-react/classname\";\nimport {IClassNameProps} from \"@bem-react/core\";\n\nexport interface ITheme extends IClassNameProps {\n  color?: 'project-default';\n  space?: 'default';\n}\n\nexport const cnTheme = cn('Theme');\n\n","import React, {useEffect, useState} from 'react';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport Container from 'react-bootstrap/Container'\nimport MainPage from \"./pages/MainPage/MainPage\";\nimport CINavbar from \"./components/CINavbar/CINavbar\";\nimport BuildPage from \"./pages/BuildPage/BuildPage\";\nimport {cnTheme} from \"./components/Theme\";\nimport \"./components/Theme/_color/Theme_color_project-default.scss\";\nimport \"./components/Theme/_space/Theme_space_default.scss\";\nimport {crxClient} from \"./utils/CrxClient\";\nimport Loader from \"./components/Loader/Loader\";\nimport {getAllBuildResults, getBuildDetailedResult} from \"./store/store\";\n\n\nconst App: React.FC = () => {\n  const [isReady, setReady] = useState<boolean>(false);\n\n  useEffect(() => {\n    crxClient.isReady\n      ? setReady(true)\n      : crxClient.onReady = () => setReady(true)\n  }, []);\n\n  return (\n    isReady\n      ? <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Container className={cnTheme({color: 'project-default', space: 'default'}, [\"p-3\"])}>\n          <CINavbar/>\n          <Switch>\n            <Route path='/' exact={true} component={() => <MainPage getData={getAllBuildResults}/>}/>\n            <Route path=\"/build/:id\" component={() => <BuildPage getData={getBuildDetailedResult}/>}/>\n          </Switch>\n        </Container>\n      </BrowserRouter>\n      : <Loader/>\n  )\n};\n\nexport default App;","import { config } from \"dotenv\"\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconfig();\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}